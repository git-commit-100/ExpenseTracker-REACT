{"version":3,"sources":["components/Chart/ChartBar.js","components/Chart/Chart.js","components/Chart/ExpenseChart.js","components/Expenses/ExpenseFilter.js","components/Expenses/ExpenseDate.js","components/Expenses/ExpenseItem.js","components/Expenses/Expenses.js","components/ExpenseInput/ExpenseForm.js","components/ExpenseInput/ExpenseInput.js","App.js","reportWebVitals.js","index.js"],"names":["ChartBar","props","barFillHeight","maxValue","Math","round","value","className","style","height","label","Chart","amountObjects","dataPoints","map","dataPoint","maximumValue","max","ExpenseChart","chartDataArr","expenses","expense","date","getMonth","amount","ExpenseFilter","selected","name","onChange","e","onChangeFilter","target","ExpenseDate","dateElem","toLocaleDateString","month","day","year","ExpenseItem","id","title","Expenses","useState","filteredYear","setFilteredYear","filteredExpenses","items","filter","displayExpenses","getFullYear","toString","expenseContent","length","elem","selectedYear","ExpenseForm","enteredTitle","setEnteredTitle","enteredAmount","setEnteredAmount","enteredDate","setEnteredDate","onSubmit","preventDefault","expenseData","Date","onSaveExpenseData","type","required","autoComplete","min","step","onClick","onCancel","ExpenseInput","showForm","setShowForm","expenseObj","random","onAddExpenseData","DUMMY_EXPENSES","App","setExpenses","prevExpenses","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.20a8771a.chunk.js","sourcesContent":["import './ChartBar.css';\r\n\r\nconst ChartBar = (props) => {\r\n\r\n    let barFillHeight = '0%';\r\n    if(props.maxValue > 0){\r\n        barFillHeight = Math.round(props.value / props.maxValue * 100) + '%';\r\n    }\r\n\r\n    return(\r\n        <div className='chart-bar'>\r\n            <div className='chart-bar-inner'>\r\n                <div className='chart-bar-fill' style={{height: barFillHeight}}></div>\r\n            </div>\r\n            <div className='chart-bar-label'>{props.label}</div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ChartBar;","import \"./Chart.css\";\r\nimport ChartBar from \"./ChartBar\";\r\n\r\nconst Chart = (props) => {\r\n\r\n    /*to find maxValue , we must convert array of object into an array of values , \r\n    so that we can perform Math.max() to receive maximum value */\r\n    let amountObjects = props.dataPoints.map(dataPoint => dataPoint.value);\r\n    let maximumValue = Math.max(...amountObjects);\r\n\r\n  return (\r\n    <div className=\"chart\">\r\n      {props.dataPoints.map((dataPoint) => {\r\n        return (\r\n          <ChartBar\r\n            key={dataPoint.label}\r\n            value={dataPoint.value}\r\n            maxValue={maximumValue}\r\n            label={dataPoint.label}\r\n          />\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chart;\r\n","import Chart from \"./Chart\";\r\nimport './ExpenseChart.css';\r\n\r\nconst ExpenseChart = (props) => {\r\n\r\n    let chartDataArr = [\r\n        {label:'Jan',value:0},\r\n        {label:'Feb',value:0},\r\n        {label:'Mar',value:0},\r\n        {label:'Apr',value:0},\r\n        {label:'May',value:0},\r\n        {label:'Jun',value:0},\r\n        {label:'Jul',value:0},\r\n        {label:'Aug',value:0},\r\n        {label:'Sep',value:0},\r\n        {label:'Oct',value:0},\r\n        {label:'Nov',value:0},\r\n        {label:'Dec',value:0},\r\n    ];\r\n\r\n    //here getMonth() gives index of month eg: Jan => 0\r\n    //also in our array we have constructed it the same way , Jan => 0\r\n    for(let expense of props.expenses){\r\n        let expenseMonth = expense.date.getMonth();\r\n        chartDataArr[expenseMonth].value += expense.amount;\r\n    }\r\n    return(\r\n        <div className='expense-chart'>\r\n            <Chart dataPoints={chartDataArr}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ExpenseChart;","import './ExpenseFilter.css';\r\n\r\nfunction ExpenseFilter(props){\r\n\r\n  const changeDateHandler = (e) => {\r\n    props.onChangeFilter(e.target.value);\r\n  }\r\n\r\n    return(\r\n        <div className='filter-date'>\r\n            <label>Filter By Year</label>\r\n            <select value={props.selected} name='filterDate' onChange={changeDateHandler}>\r\n                <option value='2019'>2019</option>\r\n                <option value='2020'>2020</option>\r\n                <option value='2021'>2021</option>\r\n                <option value='2022'>2022</option>\r\n            </select>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ExpenseFilter;","import './ExpenseDate.css';\r\n\r\nfunction ExpenseDate(props){\r\n    const dateElem = props.date;\r\n\r\n    return(\r\n        <div className='date'>\r\n            <div className='date_month'>{dateElem.toLocaleDateString('en-US',{month:'long'})}</div>\r\n            <div className='date_day'>{dateElem.toLocaleDateString('en-US',{day:'2-digit'})}</div>\r\n            <div className='date_year'>{dateElem.toLocaleDateString('en-US',{year:'numeric'})}</div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ExpenseDate;","import ExpenseDate from './ExpenseDate';\r\nimport './ExpenseItem.css';\r\n\r\nfunction ExpenseItem(props) {\r\n    return (\r\n        <div className='expenseItem'>\r\n            <ExpenseDate date={props.date}/>\r\n            <div className='hidden'>{props.id}</div>\r\n            <div className='title'>{props.title}</div>\r\n            <div className='amount'>${props.amount}</div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ExpenseItem;","import { useState } from \"react\";\r\nimport ExpenseChart from \"../Chart/ExpenseChart\";\r\nimport ExpenseFilter from \"./ExpenseFilter\";\r\nimport ExpenseItem from \"./ExpenseItem\";\r\nimport \"./Expenses.css\";\r\n\r\nfunction Expenses(props) {\r\n  //using state for filter year\r\n  const [filteredYear, setFilteredYear] = useState(\"2021\");\r\n\r\n  const filterYearHandler = (selectedYear) => {\r\n    setFilteredYear(selectedYear);\r\n  };\r\n\r\n  //showing relevant components on filtering year\r\n  //.filter returns something for every element in array\r\n  const filteredExpenses = props.items.filter((expense) => {\r\n    let displayExpenses = expense.date.getFullYear().toString();\r\n    if (displayExpenses === filteredYear) {\r\n      return displayExpenses;\r\n    } else {\r\n      return false;\r\n    }\r\n  });\r\n\r\n  //checking whether filteredExpenses has elements present or not\r\n  //default expense content\r\n  let expenseContent = <p className=\"no-expenses\">Oops ! No Entry Found</p>;\r\n\r\n  //if values present in filteredExpenses\r\n  //  if filtered expenses array contains element , print it into dom\r\n  // .map takes a function which is repeated for all elements in array\r\n  // ***important .map must return something\r\n  if (filteredExpenses.length > 0) {\r\n    expenseContent = filteredExpenses.map((elem) => {\r\n      return(\r\n        <ExpenseItem\r\n        key={elem.id}\r\n        title={elem.title}\r\n        amount={elem.amount}\r\n        date={elem.date}\r\n      />\r\n      );\r\n    });\r\n  }\r\n\r\n  return (\r\n    <div className=\"expenses\">\r\n      <ExpenseFilter\r\n        selected={filteredYear}\r\n        onChangeFilter={filterYearHandler}\r\n      />\r\n      <ExpenseChart expenses={filteredExpenses}/>\r\n      {expenseContent}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Expenses;\r\n","import \"./ExpenseForm.css\";\r\nimport { useState } from \"react\";\r\n\r\nfunction ExpenseForm(props) {\r\n  //using state to store values of user input\r\n  //unique state for every form field\r\n  const [enteredTitle, setEnteredTitle] = useState(\"\");\r\n  const [enteredAmount, setEnteredAmount] = useState(\"\");\r\n  const [enteredDate, setEnteredDate] = useState(\"\");\r\n\r\n  //change in state handlers\r\n  function changeTitleHandler(e) {\r\n    setEnteredTitle(e.target.value);\r\n  }\r\n\r\n  function changeAmountHandler(e) {\r\n    setEnteredAmount(e.target.value);\r\n  }\r\n\r\n  function changeDateHandler(e) {\r\n    setEnteredDate(e.target.value);\r\n  }\r\n\r\n  //form submit handler\r\n  function formHandler(e) {\r\n    e.preventDefault();\r\n    const expenseData = {\r\n      title: enteredTitle,\r\n      amount: +enteredAmount,\r\n      date: new Date(enteredDate),\r\n    };\r\n\r\n    //traversing upwards\r\n    props.onSaveExpenseData(expenseData);\r\n\r\n    //clearing input fields\r\n    setEnteredTitle(\"\");\r\n    setEnteredAmount(\"\");\r\n    setEnteredDate(\"\");\r\n  }\r\n\r\n  //attaching change in state listeners in JSX\r\n  return (\r\n    <div className=\"expense-form\">\r\n      <form onSubmit={formHandler}>\r\n        <div className=\"title-input-wrap\">\r\n          <label>Title : &nbsp;</label>\r\n          <input\r\n            type=\"text\"\r\n            id=\"title-input\"\r\n            required\r\n            value={enteredTitle}\r\n            autoComplete=\"off\"\r\n            onChange={changeTitleHandler}\r\n          />\r\n        </div>\r\n        <div className=\"amount-input-wrap\">\r\n          <label>Amount : &nbsp;</label>\r\n          <input\r\n            type=\"number\"\r\n            min=\"0.01\"\r\n            step=\"0.01\"\r\n            id=\"amount-input\"\r\n            required\r\n            value={enteredAmount}\r\n            autoComplete=\"off\"\r\n            onChange={changeAmountHandler}\r\n          />\r\n        </div>\r\n        <div className=\"date-input-wrap\">\r\n          <label>Date : &nbsp;</label>\r\n          <input\r\n            type=\"date\"\r\n            min=\"2019-01-01\"\r\n            max=\"2022-12-31\"\r\n            id=\"date-input\"\r\n            required\r\n            value={enteredDate}\r\n            autoComplete=\"off\"\r\n            onChange={changeDateHandler}\r\n          />\r\n        </div>\r\n        <button type=\"button\" className=\"cancel\" onClick={props.onCancel}>\r\n          Cancel\r\n        </button>\r\n        <button type=\"submit\" className=\"add-expense-btn\">\r\n          Add Expense\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ExpenseForm;\r\n","import { useState } from \"react\";\r\nimport ExpenseForm from \"./ExpenseForm\";\r\nimport \"./ExpenseInput.css\";\r\n\r\nfunction ExpenseInput(props) {\r\n  const saveExpenseDataHandler = (expenseData) => {\r\n    const expenseObj = {\r\n      ...expenseData,\r\n      id: Math.random().toString(),\r\n    };\r\n\r\n    //traversing upwards\r\n    props.onAddExpenseData(expenseObj);\r\n  };\r\n\r\n  //showing forms\r\n  const [showForm , setShowForm] = useState(false);\r\n\r\n  const notShowingForm = () => {\r\n    setShowForm(false);\r\n  }\r\n\r\n  const showingForm = () => {\r\n    setShowForm(true);\r\n  }\r\n  \r\n\r\n  return (\r\n    <div className=\"expense-input\">\r\n      {showForm === false && <button className='go-to-expense-form' onClick={showingForm}>Add Your Expense Here</button>}\r\n      {showForm === true && <ExpenseForm onSaveExpenseData={saveExpenseDataHandler} onCancel={notShowingForm}/>}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ExpenseInput;\r\n","import Expenses from './components/Expenses/Expenses';\r\nimport ExpenseInput from './components/ExpenseInput/ExpenseInput';\r\nimport './App.css'\r\nimport { useState } from 'react';\r\n\r\n\r\nconst DUMMY_EXPENSES = [\r\n  {id:'e1',title:'Car Insurance',date: new Date('2/28/19'),amount:'798.99'},\r\n  {id:'e2',title:'House Rent',date: new Date('10/08/20'),amount:'399.99'},\r\n  {id:'e3',title:'Laptop',date: new Date('5/24/21'),amount:'700.99'},\r\n  {id:'e4',title:'Toilet Paper',date: new Date('9/21/21'),amount:'160.99'},\r\n  {id:'e5',title:'Wooden Desk',date: new Date('2/21/21'),amount:'499.99'},\r\n  {id:'e6',title:'Groceries',date: new Date('6/21/21'),amount:'200'},\r\n  {id:'e7',title:'Repaired Mobile',date: new Date('11/21/21'),amount:'649.99'},\r\n];\r\n\r\nfunction App() {\r\n\r\n//usimg state for array\r\nconst [expenses,setExpenses] = useState(DUMMY_EXPENSES);\r\n\r\nconst addExpenseDataHandler = (expenseData) => {\r\n  setExpenses((prevExpenses) => {\r\n    return [expenseData,...prevExpenses];\r\n  });\r\n\r\n}\r\n  return (\r\n    <div className=\"App\">\r\n      <ExpenseInput onAddExpenseData={addExpenseDataHandler}/>\r\n      <Expenses items={expenses}/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}